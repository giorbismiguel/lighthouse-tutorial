"""This is a custom built-in Scalar type from LightHouse. It handles Carbon dates"""
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post] @hasMany
}

type Post {
    id: ID!
    title: String!
    content: String!
    user: User! @belongsTo
    comments: [Comment] @hasMany
}

type Comment{
    id: ID!
    reply: String!
    post: Post! @belongsTo
}

type Book {
    id: ID!
    title: String!
    author: String!
    image: String
    link: String
    description: String
    featured: Boolean
    category: Category! @belongsTo
}

type Category {
    id: ID!
    name: String!
    books: [Book] @hasMany
}

type Query {
    posts: [Post] @all
    post (id: Int! @eq): Post @find
    users: [User] @all
    user (id: Int! @eq): User @find
    latestPost: Post!    

    books: [Book] @all
    book(id: ID @eq): Book @find
    booksByFeatured(featured: Boolean! @eq): [Book] @all
    someComplexQuery(search: String!): [Book]

    categories: [Category] @all
    category(id: ID @eq): Category @find
}

type Mutation {
    createUser(
        name: String! @rules(apply: ["required"])
        email: String! @rules(apply: ["required", "email", "unique:users,email"])
        password: String! @rules(apply: ["min:4"])        
    ): User! @create(model: "App\\User") 

    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "App\\User")

    deleteUser(
        id: ID @rules(apply: ["required"])
    ): User @delete(model: "App\\User")

    createCategory(
        name: String! @rules(apply: ["required", "unique:categories,name"])       
    ): Category @create

    updateCategory(
        id: ID @rules(apply: ["required"])
        name: String! @rules(apply: ["required", "unique:categories,name"]) 
    ): Category @update(model: "App\\Category")

    deleteCategory(
        id: ID @rules(apply: ["required"])
    ): Category @delete(model: "App\\Category")

    createBook(
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String! @rules(apply: ["min:4"])        
        description: String! @rules(apply: ["max:500"])        
        link: String! @rules(apply: ["max:191"])        
        featured: Boolean! @rules(apply: ["boolean"])        
        category_id: Int! @rules(apply: ["int"])        
    ): Book @create(model: "App\\Book")

    updateBook(
        id: ID @rules(apply: ["required"])
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String! @rules(apply: ["min:4"])        
        description: String! @rules(apply: ["max:500"])        
        link: String! @rules(apply: ["max:191"])        
        featured: Boolean! @rules(apply: ["boolean"])        
        category_id: Int! @rules(apply: ["int"])        
    ): Book @update(model: "App\\Book")


    deleteBook(
        id: ID! @rules(apply: ["required"])
    ): Book @delete(model: "App\\Book")    
}
